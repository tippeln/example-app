■P287

●Procfile
────────────────
web: vendor/bin/heroku-php-apache2 public/
────────────────

●Procfile
────────────────
release: php artisan migrate --force
web: vendor/bin/heroku-php-apache2 public/
────────────────


■P288

●app/Http/Middleware/TrustProxies.php
────────────────
class TrustProxies extends Middleware
{
    …省略…
    protected $proxies = '*';
    …省略…
}
────────────────


●package.json
────────────────
    "scripts": {
        …省略…
        "production": "mix --production",
        "heroku-postbuild": "npm run production"
    },
────────────────


●追加する環境変数

NPM_CONFIG_PRODUCTION
false

APP_NAME
つぶやきアプリ

APP_ENV
production

APP_KEY
ローカルの.envに記載のAPP_KEYの値

APP_DEBUG
false

APP_URL
https://{P285で設定したアプリ名}.herokuapp.com

LOG_CHANNEL
stderr

MAIL_FROM_ADDRESS
送信者として使用するメールアドレス


■P292

●JAWSDB_URLの構造
────────────────
mysql://ユーザー名:パスワード@ホスト:ポート/データベース名
────────────────

●追加する環境変数

DB_CONNECTION
mysql

DB_DATABASE
データベース名

DB_HOST
ホスト

DB_USERNAME
ユーザー名

DB_PASSWORD
パスワード


■P293

●MEMCACHEDCLOUD_SERVERSの値の構造
────────────────
ホスト:ポート
────────────────


●追加する環境変数

CACHE_DRIVER
memcached

SESSION_DRIVER
memcached

MEMCACHED_HOST
ホスト

MEMCACHED_PORT
ポート

MEMCACHED_USERNAME
MEMCACHEDCLOUD_USERNAMEの値

MEMCACHED_PASSWORD
MEMCACHEDCLOUD_PASSWORDの値


────────────────
sail composer require ext-memcached
────────────────


■P297

●追加する環境変数

MAIL_MAILER
mailgun

MAILGUN_SECRET
MAILGUN_API_KEYの値


────────────────
sail composer require symfony/mailgun-mailer symfony/http-client
────────────────


■P299

●CLOUDINARY_URLの構造
────────────────
cloudinary://APIキー:APIシークレット@アカウント名
────────────────

CLOUDINARY_API_KEY
APIキー

CLOUDINARY_API_SECRET
APIシークレット

CLOUDINARY_CLOUD_NAME
アカウント名


■P300

────────────────
sail composer require "cloudinary/cloudinary_php:^2"
────────────────

────────────────
$cloudinary = new Cloudinary(
    [
        'cloud' => [
            'cloud_name' => 'n07t21i7',
            'api_key'    => '123456789012345',
            'api_secret' => 'abcdeghijklmnopqrstuvwxyz12',
        ],
    ]
);
────────────────


■P301

●app/Providers/AppServiceProvider.php（全文）
────────────────
<?php

namespace App\Providers;

use Cloudinary\Cloudinary;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this->app->bind(Cloudinary::class, function () {
            return new Cloudinary([
                'cloud' => [
                    'cloud_name' => config('cloudinary.cloud_name'),
                    'api_key'    => config('cloudinary.api_key'),
                    'api_secret' => config('cloudinary.api_secret'),
                ],
            ]);
        });
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }
}
────────────────


●config/cloudinary.php
────────────────
<?php

return [
    'cloud_name' => env('CLOUDINARY_CLOUD_NAME', null),
    'api_key' => env('CLOUDINARY_API_KEY', null),
    'api_secret' => env('CLOUDINARY_API_SECRET', null),
];
────────────────


■P302

●app/Modules/ImageUpload/ImageManagerInterface.php
────────────────
<?php
declare(strict_types=1);

namespace App\Modules\ImageUpload;

interface ImageManagerInterface
{
    /**
     * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
     * @return string
     */
    public function save($file): string;

    public function delete(string $name): void;
}
────────────────


■P303

●app/Modules/ImageUpload/LocalImageManager.php
────────────────
<?php
declare(strict_types=1);

namespace App\Modules\ImageUpload;

use Illuminate\Support\Facades\Storage;

class LocalImageManager implements ImageManagerInterface
{
    public function save($file): string
    {
        $path = (string) Storage::putFile('public/images', $file);
        $array = (array) explode("/", $path);
        return end($array);
    }

    public function delete(string $name): void
    {
        $filePath = 'public/images/' . $name;
        if (Storage::exists($filePath)) {
            Storage::delete($filePath);
        }
    }
}
────────────────


■P304

●app/Modules/ImageUpload/CloudinaryImageManager.php
────────────────
<?php
declare(strict_types=1);

namespace App\Modules\ImageUpload;

use Cloudinary\Cloudinary;

class CloudinaryImageManager implements ImageManagerInterface
{

    public function __construct(private Cloudinary $cloudinary)
    {
    }

    /**
     * @throws \Cloudinary\Api\Exception\ApiError
     */
    public function save($file): string
    {
        return $this->cloudinary
            ->uploadApi()
            ->upload(is_string($file) ? $file : $file->getRealPath())['public_id'];
    }

    /**
     * @throws \Cloudinary\Api\Exception\ApiError
     */
    public function delete(string $name): void
    {
        $this->cloudinary->uploadApi()->destroy($name);
    }
}
────────────────

■P305

●app/Services/TweetService.php
────────────────
<?php

namespace App\Services;

use App\Models\Tweet;
use Carbon\Carbon;
use App\Models\Image;
use App\Modules\ImageUpload\ImageManagerInterface;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class TweetService
{
    public function __construct(private ImageManagerInterface $imageManager)
    {}
…省略…
}
────────────────


●app/Services/TweetService.php
────────────────
…省略…
    public function saveTweet(int $userId, string $content, array $images)
    {
        DB::transaction(function () use ($userId, $content, $images) {
            $tweet = new Tweet;
            $tweet->user_id = $userId;
            $tweet->content = $content;
            $tweet->save();
            foreach ($images as $image) {
                $name = $this->imageManager->save($image);
                $imageModel = new Image();
                $imageModel->name = $name;
                $imageModel->save();
                $tweet->images()->attach($imageModel->id);
            }
        });
    }

    public function deleteTweet(int $tweetId)
    {
        DB::transaction(function () use ($tweetId) {
            $tweet = Tweet::where('id', $tweetId)->firstOrFail();
            $tweet->images()->each(function ($image) use ($tweet){
                $this->imageManager->delete($image->name);
                $tweet->images()->detach($image->id);
                $image->delete();
            });
            $tweet->delete();
        });
    }
────────────────


■P306

●app/Providers/AppServiceProvider.php（全文）
────────────────
<?php

namespace App\Providers;

use App\Modules\ImageUpload\CloudinaryImageManager;
use App\Modules\ImageUpload\ImageManagerInterface;
use App\Modules\ImageUpload\LocalImageManager;
use Cloudinary\Cloudinary;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this->app->bind(Cloudinary::class, function () {
            return new Cloudinary([
                'cloud' => [
                    'cloud_name' => config('cloudinary.cloud_name'),
                    'api_key'    => config('cloudinary.api_key'),
                    'api_secret' => config('cloudinary.api_secret'),
                ],
            ]);
        });
        if ($this->app->environment('production')) {
            $this->app->bind(ImageManagerInterface::class, CloudinaryImageManager::class);
        } else {
            $this->app->bind(ImageManagerInterface::class, LocalImageManager::class);
        }
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }
}
────────────────


■P307

●tests/Unit/Services/TweetServiceTest.php（全文）
────────────────
<?php

namespace Tests\Unit\Services;

use App\Modules\ImageUpload\ImageManagerInterface;
use PHPUnit\Framework\TestCase;
use App\Services\TweetService;
use Mockery;

class TweetServiceTest extends TestCase
{
    /**
     * @runInSeparateProcess
     * @return void
     */
    public function test_check_own_tweet()
    {

        $mock = Mockery::mock('alias:App\Models\Tweet');
        $mock->shouldReceive('where->first')->andReturn((object)[
            'id' => 1,
            'user_id' => 1
        ]);

        $imageManager = Mockery::mock(ImageManagerInterface::class);
        $tweetService = new TweetService($imageManager);

        $result = $tweetService->checkOwnTweet(1, 1);
        $this->assertTrue($result);

        $result = $tweetService->checkOwnTweet(2, 1);
        $this->assertFalse($result);
    }
}
────────────────


■P308

●app/helpers.php
────────────────
<?php
declare(strict_types=1);

if (! function_exists('image_url')) {
    function image_url(string $path): string
    {
        if (app()->environment('production')) {
            return (string) app()->make(\Cloudinary\Cloudinary::class)->image($path)->secure();
        }
        return asset('storage/images/' . $path);
    }
}
────────────────


■P309

●composer.json
────────────────
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        },
        "files": [
            "app/helpers.php"
        ]
    },
────────────────


●resources/views/components/tweet/images.blade.php
────────────────
                <a @click="$dispatch('img-modal', {  imgModalSrc: '{{ image_url($image->name) }}' })" class="cursor-pointer">
                    <img alt="{{ $image->name }}" class="object-fit w-full" src="{{ image_url($image->name) }}">
                </a>
────────────────


────────────────
sail composer dump-autoload
────────────────



■P310

●Procfile
────────────────
release: php artisan migrate --force
web: vendor/bin/heroku-php-apache2 public/
worker: php artisan queue:restart && php artisan queue:work database --tries=3 --delay=60
────────────────


■P313

────────────────
php artisan schedule:run
────────────────
